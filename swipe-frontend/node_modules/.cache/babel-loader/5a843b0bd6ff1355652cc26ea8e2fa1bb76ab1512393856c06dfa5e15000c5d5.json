{"ast":null,"code":"var _jsxFileName = \"D:\\\\SwipeAssignment\\\\swipe\\\\src\\\\component\\\\PdfToText.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './PdfToText.css'; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PDFUploader() {\n  _s();\n  const [extractedInfo, setExtractedInfo] = useState('');\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const handleFileChange = event => {\n    setExtractedInfo(''); // Clear previous result\n    setSelectedFile(event.target.files[0]);\n  };\n  const handleUpload = async () => {\n    if (!selectedFile) {\n      alert('Please select a PDF file to upload.');\n      return;\n    }\n    setIsLoading(true); // Start the loader\n\n    const formData = new FormData();\n    formData.append('pdf', selectedFile);\n    try {\n      const response = await axios.post('http://localhost:3001/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n\n      // Remove stars from the extracted text\n      let cleanedText = response.data.extractedInfo.replace(/\\*\\*/g, '') // Remove double asterisks\n      .replace(/\\*/g, ''); // Remove single asterisks\n\n      setExtractedInfo(cleanedText);\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      alert('Failed to upload the file.');\n    } finally {\n      setIsLoading(false); // Stop the loader\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Upload a PDF to Extract Text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-box\",\n      onClick: () => document.getElementById('fileInput').click(),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"fileInput\",\n        onChange: handleFileChange,\n        accept: \"application/pdf\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), selectedFile ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: selectedFile.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Click to select a file\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 54\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      disabled: !selectedFile || isLoading,\n      children: isLoading ? 'Processing...' : 'Upload and Extract Text'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loader\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }, this), extractedInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Gemini Model Result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: extractedInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(PDFUploader, \"qAfSbdCyVj+dNBBgCfvuXENGj58=\");\n_c = PDFUploader;\nexport default PDFUploader;\nvar _c;\n$RefreshReg$(_c, \"PDFUploader\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","PDFUploader","_s","extractedInfo","setExtractedInfo","selectedFile","setSelectedFile","isLoading","setIsLoading","handleFileChange","event","target","files","handleUpload","alert","formData","FormData","append","response","post","headers","cleanedText","data","replace","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","document","getElementById","click","type","id","onChange","accept","name","disabled","_c","$RefreshReg$"],"sources":["D:/SwipeAssignment/swipe/src/component/PdfToText.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport './PdfToText.css';  // Import the CSS file\r\n\r\nfunction PDFUploader() {\r\n  const [extractedInfo, setExtractedInfo] = useState('');\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const handleFileChange = (event) => {\r\n    setExtractedInfo(''); // Clear previous result\r\n    setSelectedFile(event.target.files[0]);\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    if (!selectedFile) {\r\n      alert('Please select a PDF file to upload.');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true); // Start the loader\r\n\r\n    const formData = new FormData();\r\n    formData.append('pdf', selectedFile);\r\n\r\n    try {\r\n      const response = await axios.post('http://localhost:3001/upload', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n\r\n      // Remove stars from the extracted text\r\n      let cleanedText = response.data.extractedInfo\r\n        .replace(/\\*\\*/g, '') // Remove double asterisks\r\n        .replace(/\\*/g, '');  // Remove single asterisks\r\n\r\n      setExtractedInfo(cleanedText);\r\n    } catch (error) {\r\n      console.error('Error uploading file:', error);\r\n      alert('Failed to upload the file.');\r\n    } finally {\r\n      setIsLoading(false); // Stop the loader\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Upload a PDF to Extract Text</h1>\r\n      <div className=\"upload-box\" onClick={() => document.getElementById('fileInput').click()}>\r\n        <input\r\n          type=\"file\"\r\n          id=\"fileInput\"\r\n          onChange={handleFileChange}\r\n          accept=\"application/pdf\"\r\n        />\r\n        {selectedFile ? <p>{selectedFile.name}</p> : <p>Click to select a file</p>}\r\n      </div>\r\n      <button onClick={handleUpload} disabled={!selectedFile || isLoading}>\r\n        {isLoading ? 'Processing...' : 'Upload and Extract Text'}\r\n      </button>\r\n      {isLoading && <div className=\"loader\"></div>}\r\n      {extractedInfo && (\r\n        <div className=\"result\">\r\n          <h2>Gemini Model Result</h2>\r\n          <pre>{extractedInfo}</pre>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PDFUploader;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}