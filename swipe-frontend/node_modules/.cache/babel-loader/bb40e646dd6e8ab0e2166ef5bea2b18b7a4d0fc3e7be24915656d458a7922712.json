{"ast":null,"code":"var _jsxFileName = \"D:\\\\SwipeAssignment\\\\swipe\\\\src\\\\component\\\\pdfToText.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { PDFDocument } from 'pdf-lib';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PDFToText() {\n  _s();\n  const [pdfText, setPdfText] = useState('');\n  const handleFileChange = async event => {\n    const file = event.target.files[0];\n    if (file && file.type === 'application/pdf') {\n      const arrayBuffer = await file.arrayBuffer();\n      const pdfDoc = await PDFDocument.load(arrayBuffer);\n      let textContent = '';\n\n      // Loop through each page in the PDF\n      const numPages = pdfDoc.getPageCount();\n      for (let i = 0; i < numPages; i++) {\n        const page = pdfDoc.getPage(i);\n        const pageText = await page.getTextContent();\n        textContent += pageText + '\\n';\n      }\n      setPdfText(textContent);\n    } else {\n      alert('Please upload a valid PDF file.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Upload a PDF to Extract Text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange,\n      accept: \"application/pdf\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: pdfText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(PDFToText, \"1c54FiBhvzU9B1kKAZ/12UBcogs=\");\n_c = PDFToText;\nexport default PDFToText;\nvar _c;\n$RefreshReg$(_c, \"PDFToText\");","map":{"version":3,"names":["React","useState","PDFDocument","jsxDEV","_jsxDEV","PDFToText","_s","pdfText","setPdfText","handleFileChange","event","file","target","files","type","arrayBuffer","pdfDoc","load","textContent","numPages","getPageCount","i","page","getPage","pageText","getTextContent","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","accept","_c","$RefreshReg$"],"sources":["D:/SwipeAssignment/swipe/src/component/pdfToText.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { PDFDocument } from 'pdf-lib';\r\n\r\nfunction PDFToText() {\r\n  const [pdfText, setPdfText] = useState('');\r\n\r\n  const handleFileChange = async (event) => {\r\n    const file = event.target.files[0];\r\n    if (file && file.type === 'application/pdf') {\r\n      const arrayBuffer = await file.arrayBuffer();\r\n      const pdfDoc = await PDFDocument.load(arrayBuffer);\r\n\r\n      let textContent = '';\r\n\r\n      // Loop through each page in the PDF\r\n      const numPages = pdfDoc.getPageCount();\r\n      for (let i = 0; i < numPages; i++) {\r\n        const page = pdfDoc.getPage(i);\r\n        const pageText = await page.getTextContent();\r\n        textContent += pageText + '\\n';\r\n      }\r\n\r\n      setPdfText(textContent);\r\n    } else {\r\n      alert('Please upload a valid PDF file.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Upload a PDF to Extract Text</h1>\r\n      <input type=\"file\" onChange={handleFileChange} accept=\"application/pdf\" />\r\n      <pre>{pdfText}</pre>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PDFToText;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMQ,gBAAgB,GAAG,MAAOC,KAAK,IAAK;IACxC,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAClC,IAAIF,IAAI,IAAIA,IAAI,CAACG,IAAI,KAAK,iBAAiB,EAAE;MAC3C,MAAMC,WAAW,GAAG,MAAMJ,IAAI,CAACI,WAAW,CAAC,CAAC;MAC5C,MAAMC,MAAM,GAAG,MAAMd,WAAW,CAACe,IAAI,CAACF,WAAW,CAAC;MAElD,IAAIG,WAAW,GAAG,EAAE;;MAEpB;MACA,MAAMC,QAAQ,GAAGH,MAAM,CAACI,YAAY,CAAC,CAAC;MACtC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,EAAEE,CAAC,EAAE,EAAE;QACjC,MAAMC,IAAI,GAAGN,MAAM,CAACO,OAAO,CAACF,CAAC,CAAC;QAC9B,MAAMG,QAAQ,GAAG,MAAMF,IAAI,CAACG,cAAc,CAAC,CAAC;QAC5CP,WAAW,IAAIM,QAAQ,GAAG,IAAI;MAChC;MAEAhB,UAAU,CAACU,WAAW,CAAC;IACzB,CAAC,MAAM;MACLQ,KAAK,CAAC,iCAAiC,CAAC;IAC1C;EACF,CAAC;EAED,oBACEtB,OAAA;IAAAuB,QAAA,gBACEvB,OAAA;MAAAuB,QAAA,EAAI;IAA4B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrC3B,OAAA;MAAOU,IAAI,EAAC,MAAM;MAACkB,QAAQ,EAAEvB,gBAAiB;MAACwB,MAAM,EAAC;IAAiB;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC1E3B,OAAA;MAAAuB,QAAA,EAAMpB;IAAO;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjB,CAAC;AAEV;AAACzB,EAAA,CAhCQD,SAAS;AAAA6B,EAAA,GAAT7B,SAAS;AAkClB,eAAeA,SAAS;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}