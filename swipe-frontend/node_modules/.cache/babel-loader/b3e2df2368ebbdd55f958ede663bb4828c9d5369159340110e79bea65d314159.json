{"ast":null,"code":"var _jsxFileName = \"D:\\\\SwipeAssignment\\\\swipe\\\\src\\\\component\\\\pdfToText.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { getDocument } from 'pdfjs-dist/build/pdf';\nimport pdfjsWorker from 'pdfjs-dist/build/pdf.worker.entry';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PDFToText() {\n  _s();\n  const [pdfText, setPdfText] = useState('');\n  const handleFileChange = async event => {\n    const file = event.target.files[0];\n    if (file && file.type === 'application/pdf') {\n      const fileReader = new FileReader();\n      fileReader.onload = async function () {\n        const typedarray = new Uint8Array(this.result);\n        const loadingTask = getDocument({\n          data: typedarray,\n          workerSrc: pdfjsWorker\n        });\n        const pdf = await loadingTask.promise;\n        let textContent = '';\n        for (let pageNum = 1; pageNum <= pdf.numPages; pageNum++) {\n          const page = await pdf.getPage(pageNum);\n          const text = await page.getTextContent();\n          const pageText = text.items.map(item => item.str).join(' ');\n          textContent += pageText + '\\n';\n        }\n        setPdfText(textContent);\n      };\n      fileReader.readAsArrayBuffer(file);\n    } else {\n      alert('Please upload a valid PDF file.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Upload a PDF to Extract Text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange,\n      accept: \"application/pdf\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: pdfText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s(PDFToText, \"1c54FiBhvzU9B1kKAZ/12UBcogs=\");\n_c = PDFToText;\nexport default PDFToText;\nvar _c;\n$RefreshReg$(_c, \"PDFToText\");","map":{"version":3,"names":["React","useState","getDocument","pdfjsWorker","jsxDEV","_jsxDEV","PDFToText","_s","pdfText","setPdfText","handleFileChange","event","file","target","files","type","fileReader","FileReader","onload","typedarray","Uint8Array","result","loadingTask","data","workerSrc","pdf","promise","textContent","pageNum","numPages","page","getPage","text","getTextContent","pageText","items","map","item","str","join","readAsArrayBuffer","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","accept","_c","$RefreshReg$"],"sources":["D:/SwipeAssignment/swipe/src/component/pdfToText.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { getDocument } from 'pdfjs-dist/build/pdf';\r\nimport pdfjsWorker from 'pdfjs-dist/build/pdf.worker.entry';\r\n\r\nfunction PDFToText() {\r\n  const [pdfText, setPdfText] = useState('');\r\n\r\n  const handleFileChange = async (event) => {\r\n    const file = event.target.files[0];\r\n    if (file && file.type === 'application/pdf') {\r\n      const fileReader = new FileReader();\r\n      fileReader.onload = async function () {\r\n        const typedarray = new Uint8Array(this.result);\r\n\r\n        const loadingTask = getDocument({ data: typedarray, workerSrc: pdfjsWorker });\r\n        const pdf = await loadingTask.promise;\r\n        let textContent = '';\r\n\r\n        for (let pageNum = 1; pageNum <= pdf.numPages; pageNum++) {\r\n          const page = await pdf.getPage(pageNum);\r\n          const text = await page.getTextContent();\r\n          const pageText = text.items.map((item) => item.str).join(' ');\r\n          textContent += pageText + '\\n';\r\n        }\r\n\r\n        setPdfText(textContent);\r\n      };\r\n      fileReader.readAsArrayBuffer(file);\r\n    } else {\r\n      alert('Please upload a valid PDF file.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Upload a PDF to Extract Text</h1>\r\n      <input type=\"file\" onChange={handleFileChange} accept=\"application/pdf\" />\r\n      <pre>{pdfText}</pre>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PDFToText;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,sBAAsB;AAClD,OAAOC,WAAW,MAAM,mCAAmC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMS,gBAAgB,GAAG,MAAOC,KAAK,IAAK;IACxC,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAClC,IAAIF,IAAI,IAAIA,IAAI,CAACG,IAAI,KAAK,iBAAiB,EAAE;MAC3C,MAAMC,UAAU,GAAG,IAAIC,UAAU,CAAC,CAAC;MACnCD,UAAU,CAACE,MAAM,GAAG,kBAAkB;QACpC,MAAMC,UAAU,GAAG,IAAIC,UAAU,CAAC,IAAI,CAACC,MAAM,CAAC;QAE9C,MAAMC,WAAW,GAAGpB,WAAW,CAAC;UAAEqB,IAAI,EAAEJ,UAAU;UAAEK,SAAS,EAAErB;QAAY,CAAC,CAAC;QAC7E,MAAMsB,GAAG,GAAG,MAAMH,WAAW,CAACI,OAAO;QACrC,IAAIC,WAAW,GAAG,EAAE;QAEpB,KAAK,IAAIC,OAAO,GAAG,CAAC,EAAEA,OAAO,IAAIH,GAAG,CAACI,QAAQ,EAAED,OAAO,EAAE,EAAE;UACxD,MAAME,IAAI,GAAG,MAAML,GAAG,CAACM,OAAO,CAACH,OAAO,CAAC;UACvC,MAAMI,IAAI,GAAG,MAAMF,IAAI,CAACG,cAAc,CAAC,CAAC;UACxC,MAAMC,QAAQ,GAAGF,IAAI,CAACG,KAAK,CAACC,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,GAAG,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;UAC7DZ,WAAW,IAAIO,QAAQ,GAAG,IAAI;QAChC;QAEAzB,UAAU,CAACkB,WAAW,CAAC;MACzB,CAAC;MACDX,UAAU,CAACwB,iBAAiB,CAAC5B,IAAI,CAAC;IACpC,CAAC,MAAM;MACL6B,KAAK,CAAC,iCAAiC,CAAC;IAC1C;EACF,CAAC;EAED,oBACEpC,OAAA;IAAAqC,QAAA,gBACErC,OAAA;MAAAqC,QAAA,EAAI;IAA4B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrCzC,OAAA;MAAOU,IAAI,EAAC,MAAM;MAACgC,QAAQ,EAAErC,gBAAiB;MAACsC,MAAM,EAAC;IAAiB;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC1EzC,OAAA;MAAAqC,QAAA,EAAMlC;IAAO;MAAAmC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjB,CAAC;AAEV;AAACvC,EAAA,CApCQD,SAAS;AAAA2C,EAAA,GAAT3C,SAAS;AAsClB,eAAeA,SAAS;AAAC,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}